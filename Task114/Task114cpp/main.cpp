#include <iostream>
// Количество целочисленных точек внутри круга
int number_of_int_points(int radius)
{
	// Инициализируем счетчик
	auto res = 0;
	// Если взять первую четверть круга и мысленно провести луч под 45 градусов до пересечения с окружностью,
	// то получим максимальное значение X до которого нам надо перебирать координаты.
	const auto max_x = /*cos(45)*/1 / sqrt(2) * radius;
	// Перебираем целочисленные координаты по X до максимального значения, начиная с единицы
	for (auto x = 1; x <= max_x; ++x)
	{
		// Вычисляем высоту дуги окружности в текущей координате X - это и будем ограничение по Y
		const auto max_y = sqrt(radius*radius - x * x);
		// Ограничение по Y приводим к целому в меньшую сторону и отнимаем количество целочисленных точек до значения когда Y <= X
		// и умножаем на 2, потому что нижняя часть этого разделения имеет такое же количество целочисленных точек
		const auto part = (static_cast<int>(max_y) - x) * 2;
		res += part;
	}
	// И добавляем целочисленные точки, лежащие на разделительной линии
	res += static_cast<int>(max_x);
	// Результат умножаем на количество четвертей у круга, 
	// добавляем количество точек лежащих на осях в четыре стороны от центра,
	// и добавляем центр окружности (по условиям задачи он целочисленный)
	return 1 + 4 * radius + 4 * res;
}

// Test
int main()
{
	for (auto i = 1; i <= 20; ++i)
	{
		std::cout << "Radius = " << i << "; Answer = " << number_of_int_points(i) << std::endl;
	}
 	return 0;
}